<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:util="http://www.springframework.org/schema/util" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/util
        http://www.springframework.org/schema/util/spring-util.xsd
">
<context:component-scan base-package="ru.shiriev.springcourse" />
    <!--
    Для начала нужно создать бин connection source В spring их два вида:
    DriverManagerDataSource - всегда возвращает новое соединение
    SingleConnectionDataSource - всегда возвращает одно и тоже соединение
    -->
    <!-- Заменим webDataSource на connection source на который берет соединения из пула. Для этого подключили
    зависимость commons-dbcp
    <bean id="webDataSource"
          class="org.springframework.jdbc.datasource.DriverManagerDataSource" >
        <property name="driverClassName" value="com.mysql.cj.jdbc.Driver"/>
        <property name="url" value="jdbc:mysql://localhost:3306/web" />
        <property name="username" value="root" />
        <property name="password" value="demo" />
    </bean>
    -->
    <!-- вроде dbcp это использование пула сессий -->
<bean id="webDataSource"
      class="org.apache.commons.dbcp.BasicDataSource"
      destroy-method="close">
    <property name="driverClassName" value="${jdbc.driverClassName}"/>
    <property name="url" value="${jdbc.url}" />
    <property name="username" value="${jdbc.username}" />
    <property name="password" value="${jdbc.password}" />
</bean>
<context:property-placeholder location="classpath:jdbc.properties" />

    <!-- паттерн шаблонный метод -->
    <bean id="jdbcTemplate"
          class="org.springframework.jdbc.core.JdbcTemplate" >
        <constructor-arg ref="webDataSource"/>
    </bean>

<!--    <bean id="courseDAO" class="ru.shiriev.springcourse.dao.JdbcCourseDao">-->
<!--        <property name="jdbcTemplate" ref="jdbcTemplate"/>-->
<!--    </bean>-->
    <util:properties id="hibernateProperties">
        <prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
        <prop key="hibernate.max_fetch_depth">3</prop>
        <prop key="hibernate.max_fetch_size">50</prop>
        <prop key="hibernate.max_batch_size">10</prop>
        <prop key="hibernate.show_sql">true</prop>
    </util:properties>

<!--    <bean id="sessionFactory"-->
<!--          class="org.springframework.orm.hibernate5.LocalSessionFactoryBean"-->
<!--          p:dataSource-ref="webDataSource"-->
<!--          p:packagesToScan="ru.shiriev.springcourse"-->
<!--          p:hibernateProperties-ref="hibernateProperties" />-->

<!--    Вместо session factory используем entity manager factory-->
    <bean id="emf" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="dataSource" ref="webDataSource" />
        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"/>
        </property>
        <property name="packagesToScan" value="ru.shiriev.springcourse.dao" />
        <property name="jpaProperties" ref="hibernateProperties" />
    </bean>


    <!-- преобразование sql exception в исключения самого spring Чтобы это работало наш бин должен создавиться
    с аннотацией @Repository -->
    <bean class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor"/>

<!-- для того, чтобы управлять транзакциями  необходимо указаать данный элемент  -->
    <tx:annotation-driven />

    <!-- hibernate требует использованией менеджера транзакций
    Обратие внимание, что id="transactionManager" это зарезервированный айди, который будет подхватываться
    аннотацией @Repository автоматом. Если указывать другой айди, то придется прописывать этот айди вручную-->
    <bean id="transactionManager"
          class="org.springframework.orm.jpa.JpaTransactionManager"
          p:entityManagerFactory-ref="emf"/>
</beans>